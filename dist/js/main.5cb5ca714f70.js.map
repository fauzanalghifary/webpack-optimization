{"version":3,"file":"js/main.5cb5ca714f70.js","mappings":"8JACA,OAAgB,aAAe,wB,uVCG/B,MAAMA,EAAe,OACfC,EAAoBC,EAAAA,EAAI;aACjBF;cACCA;;;;;;EAQP,SAASG,EAAYC,GACxB,MAAMC,EAAoBD,EAAME,KAAI,SAAUC,GAC1C,MAAMC,EAAYD,EAAKE,UAAY,YAAc,GAC3CC,EAAkBH,EAAKE,UAAY,UAAY,GACrD,MAAQ,8BACWF,EAAKI,cAAcH,oGAEAI,uEACVX,mDAAmES,yDAE9EH,EAAKM,yFAI1B,IACAC,SAASC,cAAc,cAAcC,UAAYX,EAAkBY,KAAK,GAC5E,CAOO,SAASC,EAAUC,GACtB,OAAOC,SACHD,EAAQE,QAAQV,IACbQ,EAAQG,WAAWD,QAAQV,IAC3BQ,EAAQG,WAAWA,WAAWD,QAAQV,GAC3C,GACN,CC1CA,IAAIY,E,+MAEG,SAASC,IACZ,OAAOD,CACX,C,aCGO,SAASE,EAAoBC,GAAO,IAAAC,EACvC,IAAId,EAAOa,EAAME,OAAOC,MCVrB,IFQiBtB,ECGhBoB,EAAGd,ECTFiB,QAAQ,OAAQ,IAChBA,QAAQ,OAAQ,IAChBA,QAAQ,UAAW,KDOxBjB,GAAuBkB,EAAAA,EAAAA,GAAUJ,GDHbpB,ECIZ,CACJI,GAAIqB,KAAKC,MACTpB,KAAMA,EACNJ,WAAW,GDNfc,EAAKW,KAAK3B,GCQVJ,EAAYqB,KFiBZV,SAASC,cAAc,aAAac,MAAQ,GAYhD,WACI,MAAMM,EAAsBrB,SAASsB,cAAc,OACnDD,EAAoBE,UAAUC,IAAI,QAAS,gBAAiBC,EAAAA,cAC5DJ,EAAoBK,aAAa,OAAQ,SACzCL,EAAoBnB,UAAY,kBAChCF,SAAS2B,KAAKC,YAAYP,GAE1BQ,YAAW,WACP,MAAMR,EAAsBrB,SAASC,cAAe,IAAGwB,EAAAA,gBACvDJ,EAAoBb,WAAWsB,YAAYT,EAC/C,GAAG,IACP,CAtBIU,EEhBJ,CEXAC,OAAOC,iBAAiB,QAJjB,WFEH5C,EAAYqB,IEAhB,IAGAV,SAASiC,iBAAiB,UAAU,SAAUrB,GACtCA,EAAME,OAAOS,UAAUW,SAAS,aAChCvB,EAAoBC,EAE5B,IACAZ,SAASiC,iBAAiB,SAAS,SAAUrB,GACrCA,EAAME,OAAOS,UAAUW,SAAS,WFMjCC,eAAsCvB,GACzC,OAAO,MAAEwB,IAAWC,QAASC,UAAYC,QAAQC,IAAI,CACjD,6BAIA,oCAKE3C,EAAKO,EAAUQ,EAAME,QAC3BwB,EAAE,wBAAwB7B,KAAK,UAAWZ,GAClBuC,EAAMK,oBAC1BzC,SAAS0C,eAAe,sBAEZC,MACpB,CEtBQC,CAAuBhC,GAEU,kBAAjCA,EAAME,OAAOP,QAAQF,SF0CtB,SAAiCO,ID1CjC,SAAoBf,EAAIF,GAC3B,MAAMkD,EAAYpC,EAAKqC,WAAU,SAAU/B,GACvC,OAAOA,EAAMlB,KAAOA,CACxB,IACAY,EAAKoC,GAAWlD,UAAYA,CAChC,CCwCIoD,CAFW3C,EAAUQ,EAAME,QACPF,EAAME,OAAOkC,SAEjC3D,EAAYqB,IAChB,CE9CQuC,CAAwBrC,GAEJ,wBAApBA,EAAME,OAAOjB,IFmBdsC,iBACH,OAAO,MAAEC,IAAWC,QAASC,UAAYC,QAAQC,IAAI,CACjD,6BAIA,oCDlCD,IAAoB3C,ICuCZyC,EAAE,wBAAwB7B,KAAK,WDtC1CA,EAAOA,EAAKyC,QAAO,SAAUC,GACzB,OAAOA,EAAKtD,KAAOA,CACvB,ICsCAR,EAAYqB,KACY0B,EAAMK,oBAC1BzC,SAAS0C,eAAe,sBAEZU,MACpB,CEpCQC,EAER,IAEAC,QAAQC,IAAI,c","sources":["webpack://webpack-optimization-for-production/./src/styles/notification.module.css","webpack://webpack-optimization-for-production/./src/js/ui.js","webpack://webpack-optimization-for-production/./src/js/data.js","webpack://webpack-optimization-for-production/./src/js/event-handlers.js","webpack://webpack-optimization-for-production/./src/js/helpers.ts","webpack://webpack-optimization-for-production/./src/js/index.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"notification\":\"E0yvz8SDFF78Hbsu2uXH\"};","import styles from '../styles/notification.module.css'\nimport { css } from '@emotion/css'\nimport CheckmarkImage from '../../images/checkmark.svg'\n\nconst checkboxSize = '30px'\nconst realCheckboxClass = css`\n    width: ${checkboxSize};\n    height: ${checkboxSize};\n    cursor: pointer;\n    opacity: 0;\n    position: absolute;\n    top: -3px;\n    left: -5px;\n`\n\nexport function renderTodos(todos) {\n    const renderedItemArray = todos.map(function (todo) {\n        const className = todo.completed ? 'completed' : ''\n        const completionClass = todo.completed ? 'checked' : ''\n        return `\n            <li data-id=\"${todo.id}\" class=\"${className}\">\n                <span class=\"custom-checkbox\">\n                    <img class=\"check\" src=\"${CheckmarkImage}\" width=\"22\" height=\"22\"></img>\n                    <input class=\"${realCheckboxClass}\" data-element=\"real-checkbox\" type=\"checkbox\" ${completionClass} />\n                </span>\n                <label>${todo.text}</label>\n                <span class=\"delete\"></span>\n            </li>\n        `\n    })\n    document.querySelector('.todo-list').innerHTML = renderedItemArray.join('')\n}\n\nexport function clearNewTodoInput() {\n    document.querySelector('.new-todo').value = ''\n    showNotification()\n}\n\nexport function getTodoId(element) {\n    return parseInt(\n        element.dataset.id\n        || element.parentNode.dataset.id\n        || element.parentNode.parentNode.dataset.id\n    , 10)\n}\n\nfunction showNotification() {\n    const notificationElement = document.createElement('div');\n    notificationElement.classList.add('alert', 'alert-success', styles.notification);\n    notificationElement.setAttribute('role', 'alert');\n    notificationElement.innerHTML = 'Todo item added';\n    document.body.appendChild(notificationElement);\n    // And we are going to remove this div after 2 seconds.\n    setTimeout(function () {\n        const notificationElement = document.querySelector(`.${styles.notification}`)\n        notificationElement.parentNode.removeChild(notificationElement)\n    }, 2000)\n}\n","import initialTodos from '../todos.json'\n\nlet data = initialTodos\n\nexport function getAllTodos() {\n    return data\n}\n\nexport function addTodo(todo) {\n    data.push(todo)\n}\n\nexport function removeTodo(id) {\n    data = data.filter(function (item) {\n        return item.id !== id\n    })\n}\n\nexport function updateTodo(id, completed) {\n    const itemIndex = data.findIndex(function (value) {\n        return value.id === id\n    })\n    data[itemIndex].completed = completed\n}\n","import { renderTodos, clearNewTodoInput, getTodoId } from './ui'\nimport { getAllTodos, addTodo, removeTodo, updateTodo } from './data'\nimport { capitalize } from 'lodash-es'\nimport { trim } from './helpers'\n\nexport function onLoadEventHandler() {\n    renderTodos(getAllTodos())\n}\n\nexport function newTodoEventHandler(event) {\n    let text = event.target.value\n    text = text |> trim |> capitalize\n    addTodo({\n        id: Date.now(),\n        text: text,\n        completed: false\n    })\n    renderTodos(getAllTodos())\n    clearNewTodoInput()\n}\n\nexport async function removeTodoEventHandler(event) {\n    const [{ Modal }, { default: $}] = await Promise.all([\n        import(\n            'bootstrap'\n            /* webpackChunkName: \"bootstrap\" */\n        ),\n        import(\n            'jquery'\n            /* webpackChunkName: \"jquery\" */\n        )\n    ])\n    const id = getTodoId(event.target)\n    $('#modal-delete-button').data('todo-id', id)\n    const deleteTodoModal = Modal.getOrCreateInstance(\n        document.getElementById('modal-delete-todo')\n    )\n    deleteTodoModal.show()\n}\n\nexport async function confirmRemoveEventHandler() {\n    const [{ Modal }, { default: $}] = await Promise.all([\n        import(\n            'bootstrap'\n            /* webpackChunkName: \"bootstrap\" */\n        ),\n        import(\n            'jquery'\n            /* webpackChunkName: \"jquery\" */\n        )\n    ])\n    const id = $('#modal-delete-button').data('todo-id')\n    removeTodo(id)\n    renderTodos(getAllTodos())\n    const deleteTodoModal = Modal.getOrCreateInstance(\n        document.getElementById('modal-delete-todo')\n    )\n    deleteTodoModal.hide()\n}\n\nexport function toggleTodoEventListener(event) {\n    const id = getTodoId(event.target)\n    const isCompleted = event.target.checked\n    updateTodo(id, isCompleted)\n    renderTodos(getAllTodos())\n}\n","export function trim(value: string): string {\n    return value\n        .replace(/^\\s+/, '')\n        .replace(/\\s+$/, '')\n        .replace(/\\s{2,}/g, ' ');\n}","import '../styles/vendors.scss'\nimport '../styles/index.scss'\nimport { onLoadEventHandler, newTodoEventHandler, removeTodoEventHandler, toggleTodoEventListener, confirmRemoveEventHandler } from './event-handlers';\n\nexport function renderApp() {\n    onLoadEventHandler()\n}\n\nwindow.addEventListener('load', renderApp)\ndocument.addEventListener('change', function (event) {\n    if (event.target.classList.contains('new-todo')) {\n        newTodoEventHandler(event)\n    }\n})\ndocument.addEventListener('click', function (event) {\n    if (event.target.classList.contains('delete')) {\n        removeTodoEventHandler(event)\n    }\n    if (event.target.dataset.element === 'real-checkbox') {\n        toggleTodoEventListener(event)\n    }\n    if (event.target.id === 'modal-delete-button') {\n        confirmRemoveEventHandler(event)\n    }\n})\n\nconsole.log('Hello World')"],"names":["checkboxSize","realCheckboxClass","css","renderTodos","todos","renderedItemArray","map","todo","className","completed","completionClass","id","CheckmarkImage","text","document","querySelector","innerHTML","join","getTodoId","element","parseInt","dataset","parentNode","data","getAllTodos","newTodoEventHandler","event","_ref","target","value","replace","capitalize","Date","now","push","notificationElement","createElement","classList","add","styles","setAttribute","body","appendChild","setTimeout","removeChild","showNotification","window","addEventListener","contains","async","Modal","default","$","Promise","all","getOrCreateInstance","getElementById","show","removeTodoEventHandler","itemIndex","findIndex","updateTodo","checked","toggleTodoEventListener","filter","item","hide","confirmRemoveEventHandler","console","log"],"sourceRoot":""}